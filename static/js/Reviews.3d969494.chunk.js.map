{"version":3,"sources":["components/Reviews/Reviews.js"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","FetchMoviesReviews","then","data","results","length","map","i","author","content","id"],"mappings":"iOAIe,SAASA,IACtB,IAAQC,EAAYC,cAAZD,QACR,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,qBAAU,WACRC,YAAmBN,GAASO,MAAK,SAAAC,GAC/BJ,EAAWI,EAAKC,cAEjB,CAACT,IAEsB,IAAnBG,EAAQO,OACb,6BACGP,EAAQQ,KAAI,SAAAC,GACX,OACE,+BACE,0CAAaA,EAAEC,UACf,4BAAID,EAAEE,YAFCF,EAAEG,SAQjB","file":"static/js/Reviews.3d969494.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { FetchMoviesReviews } from '../Api/Api';\r\n\r\nexport default function Reviews() {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    FetchMoviesReviews(movieId).then(data => {\r\n      setReviews(data.results);\r\n    });\r\n  }, [movieId]);\r\n\r\n  return reviews.length !== 0 ? (\r\n    <ul>\r\n      {reviews.map(i => {\r\n        return (\r\n          <li key={i.id}>\r\n            <h2>Author: {i.author}</h2>\r\n            <p>{i.content}</p>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  ) : (\r\n    <p>We don't have any reviews for this movie.</p>\r\n  );\r\n}\r\n"],"sourceRoot":""}